// Generated code doesn't follow rust naming convention
#[allow(non_camel_case_types)]
#[allow(non_upper_case_globals)]
mod internal {
	include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
}

#[repr(transparent)]
pub struct Context(*mut ::std::ffi::c_void);

impl Context {
	/// # Safety
	///
	/// Only to be called by code generated by Ecsact
	pub unsafe fn new(ctx: *mut ::std::ffi::c_void) -> Self {
		Self(ctx)
	}
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
///
/// # Safety
///
/// System implementations only with `readwrite` capabilities may use this
/// function. https://ecsact.dev/docs/system-impl
pub unsafe fn update<C: ecsact::ComponentLike>(ctx: Context, component: &C) {
	crate::internal::ecsact_system_execution_context_update(
		ctx.0 as *mut crate::internal::ecsact_system_execution_context,
		<C as ecsact::ComponentLike>::ID.into(),
		component as *const _ as *const std::ffi::c_void,
	);
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
///
/// # Safety
///
/// System implementations only with `readwrite` or `readonly` capabilities may
/// use this function. https://ecsact.dev/docs/system-impl
pub unsafe fn get<C: ecsact::ComponentLike>(
	ctx: Context,
	out_component: &mut C,
) {
	crate::internal::ecsact_system_execution_context_get(
		ctx.0 as *mut crate::internal::ecsact_system_execution_context,
		<C as ecsact::ComponentLike>::ID.into(),
		out_component as *mut _ as *mut std::ffi::c_void,
	);
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
///
/// # Safety
///
/// System implementations only with `add` capabilities may use this function.
/// https://ecsact.dev/docs/system-impl
pub unsafe fn add<C: ecsact::ComponentLike>(ctx: Context, component: &C) {
	crate::internal::ecsact_system_execution_context_add(
		ctx.0 as *mut crate::internal::ecsact_system_execution_context,
		<C as ecsact::ComponentLike>::ID.into(),
		component as *const _ as *const std::ffi::c_void,
	);
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
///
/// # Safety
///
/// System implementations only with `remove` capabilities may use this
/// function. https://ecsact.dev/docs/system-impl
pub unsafe fn remove(ctx: Context, id: ecsact::ComponentLikeId) {
	crate::internal::ecsact_system_execution_context_remove(
		ctx.0 as *mut crate::internal::ecsact_system_execution_context,
		id.into(),
	);
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
///
/// # Safety
///
/// System implementations only with `optional` capabilities may use this
/// function. https://ecsact.dev/docs/system-impl
pub unsafe fn has(ctx: Context, id: ecsact::ComponentLikeId) -> bool {
	crate::internal::ecsact_system_execution_context_has(
		ctx.0 as *mut crate::internal::ecsact_system_execution_context,
		id.into(),
	)
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
pub fn id(ctx: Context) -> ecsact::SystemLikeId {
	unsafe {
		crate::internal::ecsact_system_execution_context_id(
			ctx.0 as *mut crate::internal::ecsact_system_execution_context,
		)
		.into()
	}
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
///
/// # Safety
///
/// Only actions may use this function. https://ecsact.dev/docs/system-impl
pub unsafe fn action<C: ecsact::ComponentLike>(
	ctx: Context,
	out_action: &mut C,
) {
	crate::internal::ecsact_system_execution_context_action(
		ctx.0 as *mut crate::internal::ecsact_system_execution_context,
		out_action as *mut _ as *mut std::ffi::c_void,
	);
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
pub fn same(ctx_a: Context, ctx_b: Context) -> bool {
	unsafe {
		crate::internal::ecsact_system_execution_context_same(
			ctx_a.0 as *mut crate::internal::ecsact_system_execution_context,
			ctx_b.0 as *mut crate::internal::ecsact_system_execution_context,
		)
	}
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
///
/// # Safety
///
/// Only nested systems may use this function. https://ecsact.dev/docs/system-impl
pub unsafe fn parent(ctx: Context) -> Context {
	Context(crate::internal::ecsact_system_execution_context_parent(
		ctx.0 as *mut crate::internal::ecsact_system_execution_context,
	) as *mut std::ffi::c_void)
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
pub fn entity(ctx: Context) -> i32 {
	unsafe {
		crate::internal::ecsact_system_execution_context_entity(
			ctx.0 as *mut crate::internal::ecsact_system_execution_context,
		)
	}
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
///
/// # Safety
///
/// This function may only be used on system implementation with entity
/// association. https://ecsact.dev/docs/system-impl
pub unsafe fn other(ctx: Context, entity: i32) -> Context {
	unsafe {
		Context(crate::internal::ecsact_system_execution_context_other(
			ctx.0 as *mut crate::internal::ecsact_system_execution_context,
			entity,
		) as *mut _)
	}
}

/// This function is not meant for direct use. Please use the code generated
/// contexts instead.
///
/// # Safety
///
/// This function may only be used on system implementation with a generates
/// block. https://ecsact.dev/docs/system-impl
pub unsafe fn generate(ctx: Context) {
	// TODO
	crate::internal::ecsact_system_execution_context_generate(
		ctx.0 as *mut crate::internal::ecsact_system_execution_context,
		0,
		0 as _,
		0 as _,
	);
}
